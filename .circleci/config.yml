version: 2.1
jobs:
  node:
    docker:
      - image: circleci/node:14.8.0
    steps:
      - checkout

      - restore_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}

      - restore_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}

      - run: yarn install

      - save_cache:
          key: yarn-v1-{{ checksum "yarn.lock" }}-{{ arch }}
          paths:
            - ~/.cache/yarn

      - save_cache:
          key: node-v1-{{ checksum "package.json" }}-{{ arch }}
          paths:
            - node_modules

      # - run:
      #     name: jest tests
      #     command: |
      #       mkdir -p test-results/jest
      #       yarn run test
      #     environment:
      #       JEST_JUNIT_OUTPUT: test-results/jest/junit.xml

      - persist_to_workspace:
          paths:
            - node_modules
    
      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results

  android:
    docker:
      - image: circleci/android:api-30
    environment:
      JVM_OPTS: -Xmx3200m

    steps: 
      - checkout
      - restore_cache:
          key: jars-{{ checksum "android/build.gradle" }}-{{ checksum  "android/build.gradle" }}
      - run: #if permission for Gradlew Dependencies fail, use this.     
          name: Chmod permissions
          command: sudo chmod +x ./android/gradlew
      - run:
          name: Download Dependencies
          command: cd android && ./gradlew androidDependencies
      - save_cache:
          paths:
            - ~/android/.gradle
          key: jars-{{ checksum "android/build.gradle" }}-{{ checksum "android/build.gradle" }}
      - run:
          name: Run Tests
          command: ./android/gradlew lint test

      # Generate apk
      - run: cd android && ./gradlew assembleDebug
      # Upload app to BrowserStack and set app url in an environment variable.
      # Here replace browserstack_android_sample-debug.apk with name of your apk.
      - run:
          name : App upload and Set app id in environment variable.
          command : |
            APP_UPLOAD_RESPONSE=$(curl -u "$BROWSERSTACK_USERNAME:$BROWSERSTACK_ACCESS_KEY" -X POST https://api-cloud.browserstack.com/app-automate/upload -F "file=@browserstack_android_sample/build/outputs/apk/debug/browserstack_android_sample-debug.apk")
            echo "APP_UPLOAD_RESPONSE :  " + $APP_UPLOAD_RESPONSE
            APP_ID=$(echo $APP_UPLOAD_RESPONSE | jq -r ".app_url")
            if [ $APP_ID != null ]; then
              echo "Apk uploaded to BrowserStack with app id : ",$APP_ID;
              echo "export BROWSERSTACK_APP_ID=$APP_ID" >> $BASH_ENV;
              source $BASH_ENV;
              echo "Setting value of BROWSERSTACK_APP_ID in environment variables to  ",$APP_ID;
            else
              UPLOAD_ERROR_MESSAGE=$(echo $APP_UPLOAD_RESPONSE | jq -r ".error")
              echo "App upload failed, reason : ",$UPLOAD_ERROR_MESSAGE
              exit 1;
            fi
      # run tests!
      - run: cd android && ./gradlew test
      - store_artifacts:
          path: app/build/reports
          destination: reports
      - store_test_results:
          path: app/build/test-results

workflows:
  version: 2.1
  node-android:
    jobs:
      - node
      - android:
          requires:
            - node
      